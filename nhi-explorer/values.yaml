---
# yaml-language-server: $schema=values.schema.json
# Default values for nhi-explorer.

# @schema
# required: [version, schedule]
# @schema
# Options for the agent configuration.
agent:
  # Specific version of the agent to use
  version: 0.2.0
  # Schedule to run the agent on
  schedule: '* * * * *'


# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: ghcr.io/gitguardian/gg-nhi-explorer
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent

# This is for the secretes for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
# Example:
# - name: my-secret
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ''
fullnameOverride: ''

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ''

# @schema
# additionalProperties: true
# @schema
# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}

# @schema
# additionalProperties: true
# @schema
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

# @schema
# additionalProperties: true
# @schema
# Example:
# fsGroup: 2000
podSecurityContext: {}

# @schema
# additionalProperties: true
# @schema
# Example:
# capabilities:
#   drop:
#   - ALL
# readOnlyRootFilesystem: true
# runAsNonRoot: true
# runAsUser: 1000
securityContext: {}


# @schema
# $ref: common.schema.json#/properties/resources
# @schema
# We usually recommend not to specify default resources and to leave this as a conscious
# choice for the user. This also increases chances charts run on environments with little
# resources, such as Minikube. If you do want to specify resources, uncomment the following
# lines, adjust them as necessary, and remove the curly braces after 'resources:'.
# We usually recommend not to specify default resources and to leave this as a conscious
# choice for the user. This also increases chances charts run on environments with little
# resources, such as Minikube. If you do want to specify resources, uncomment the following
# lines, adjust them as necessary, and remove the curly braces after 'resources:'.
# Example:
# limits:
#   cpu: 100m
#   memory: 128Mi
# requests:
#   cpu: 100m
#   memory: 128Mi
resources: {}


# @schema
# $ref: common.schema.json#/properties/volumes
# @schema
# Additional volumes on the output Deployment definition.
# Example:
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false
volumes: []

# @schema
# $ref: common.schema.json#/properties/volumeMounts
# @schema
# Additional volumeMounts on the output Deployment definition.
# Example:
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true
volumeMounts: []

# @schema
# additionalProperties: true
# @schema
nodeSelector: {}

# @schema
# additionalProperties: true
# @schema
tolerations: []

# @schema
# additionalProperties: true
# @schema
affinity: {}
